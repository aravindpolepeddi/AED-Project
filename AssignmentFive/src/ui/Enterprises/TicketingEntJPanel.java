package ui.Enterprises;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import business.Business;

import business.useraccount.UserAccount;
import business.merchandise.merchandiseShop;
import business.merchandise.merchandiseShopDirectory;
import business.role.ParkingManagerRole;
import business.role.Role;
import business.ticketing.ParkingDirectory;
import business.ticketing.ParkingManager;
import business.ticketing.PickandDropDirectory;
import business.ticketing.PickandDropManager;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author aravindpolepeddi
 */
public class TicketingEntJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageRestaurantJPanel
     */
    private Business system;
    merchandiseShopDirectory merchShopDir;
    private ParkingDirectory parkingDirectory;
    private PickandDropDirectory pdDirectory;

    private JPanel userProcessContainer;
    private Boolean update = false;
    merchandiseShop merchShop = new merchandiseShop();

    public TicketingEntJPanel(JPanel userProcessContainer, UserAccount uadir, Business system) {
        initComponents();

        if (system.getPdDirectory() == null) {
            pdDirectory = new PickandDropDirectory();
        } else {
            this.pdDirectory = system.getPdDirectory();
        }
        if (system.getParkingDirectory() == null) {
            parkingDirectory = new ParkingDirectory();
        } else {
            this.parkingDirectory = system.getParkingDirectory();
        }

        this.userProcessContainer = userProcessContainer;
        this.system = system;
        populateTable();
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) jTableTicketingManagers.getModel();
        model.setRowCount(0);
        for (UserAccount userAccount : system.getUserAccountDirectory().getUserAccountList()) {
            Object[] row = new Object[4];
            ParkingManager pm = null;
            PickandDropManager pdm = null;
            if (parkingDirectory != null && parkingDirectory.getParkingManagerList() != null && !parkingDirectory.getParkingManagerList().isEmpty()) {
                pm = parkingDirectory.getParkingManagerList().stream().filter(x -> x.getParkingManagerName().equals(userAccount.getName())).findAny().orElse(null);
            }
            if (pdDirectory != null && pdDirectory.getPdList() != null && !pdDirectory.getPdList().isEmpty()) {
                pdm = pdDirectory.getPdList().stream().filter(x -> x.getManagerName().equals(userAccount.getName())).findAny().orElse(null);
            }
            if (userAccount.getRole() != null && userAccount.getRole().type != null && userAccount.getRole().type == Role.RoleType.TicketingAdmin) {
                row[0] = userAccount.getUsername();
                row[1] = userAccount.getPassword();
                row[2] = userAccount.getName();
                if (pm != null) {
                    row[3] = pm.type.ParkingManager.toString();
                } else if (pdm != null) {
                    row[3] = pdm.type.PickandDropManager.toString();
                }
                model.addRow(row);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableTicketingManagers = new javax.swing.JTable();
        jTextName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextUsername = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jButtonSave = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();

        jPanel1.setBackground(new java.awt.Color(255, 204, 51));

        jTableTicketingManagers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Username", "Password", "Name", "Organization"
            }
        ));
        jScrollPane1.setViewportView(jTableTicketingManagers);

        jTextName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextNameActionPerformed(evt);
            }
        });

        jLabel1.setText("Enter  Name");

        jLabel2.setText("Enter Username");

        jLabel3.setText("Enter Password");

        jButtonSave.setBackground(new java.awt.Color(255, 51, 51));
        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jLabel4.setText("Select Organization Name");

        jButton1.setBackground(new java.awt.Color(255, 51, 51));
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 51, 51));
        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 51, 51));
        jButton3.setText("Update");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Parking", "PickupandDrop", "SeatBooking" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(30, 30, 30)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonSave)
                                .addGap(119, 119, 119))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3))
                                        .addGap(3, 3, 3))
                                    .addComponent(jLabel4))
                                .addGap(67, 67, 67)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jTextName)
                                        .addComponent(jTextUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                                        .addComponent(jPasswordField1)))
                                .addGap(43, 43, 43))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton3))))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(jButtonSave)
                .addGap(17, 17, 17))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        // TODO add your handling code here:

        StringBuilder Error = new StringBuilder();
        if (jComboBox1.getSelectedIndex() == 0) {
            ParkingManager parking = parkingDirectory.addParkingManager();
            if (jTextName.getText().isEmpty()) {
                Error.append("Enter Valid Name \n");
            } else {
                parking.setParkingManagerName(jTextName.getText());

                jTextName.setText("");
            }
            if (jTextUsername.getText().isEmpty()) {
                Error.append("Enter Capacity \n");
            } else {
                parking.setUsername(jTextUsername.getText());
                jTextUsername.setText("");
            }
            if (jPasswordField1.getText().isEmpty()) {
                Error.append("Enter Valid Start Date \n");
            } else {
                parking.setPassword(jPasswordField1.getText());
                jPasswordField1.setText("");
            }

            if (update == true) {
                update = false;
            }
            if (Error.isEmpty()) {
                system.setParkingDirectory(parkingDirectory);
                ParkingManagerRole role = new ParkingManagerRole();
                system.getUserAccountDirectory().createUserAccount(parking.getUsername(), parking.getParkingManagerName(), parking.getPassword(), role, null);

            } else {
                JOptionPane.showMessageDialog(this, Error);
            }
        }

        if (jComboBox1.getSelectedIndex() == 1) {
            PickandDropManager pd = new PickandDropManager();
            if (jTextName.getText().isEmpty()) {
                Error.append("Enter Valid Name \n");
            } else {
                pd.setManagerName(jTextName.getText());
                jTextName.setText("");
            }
            if (jTextUsername.getText().isEmpty()) {
                Error.append("Enter Capacity \n");
            } else {
                pd.setUsername(jTextUsername.getText());
                jTextUsername.setText("");
            }
            if (jPasswordField1.getText().isEmpty()) {
                Error.append("Enter Valid Start Date \n");
            } else {
                pd.setPassword(jPasswordField1.getText());
                jPasswordField1.setText("");
            }

            if (update == true) {
                update = false;
            }
            if (Error.isEmpty()) {
                system.getPdDirectory().getPdList().add(pd);
                system.getUserAccountDirectory().createUserAccount(pd.getUsername(), pd.getManagerName(), pd.getPassword(), pd, null);
            } else {
                JOptionPane.showMessageDialog(this, Error);
            }
        }

        /*
        if(jComboBox1.getSelectedIndex()==2){
        PickandDrop pd = new PickandDrop();
        if(jTextName.getText().isEmpty()){ Error.append("Enter Valid Name \n");}
        else{pd.setDriverName(jTextName.getText());
        jTextName.setText("");}
        if(jTextUsername.getText().isEmpty()){ Error.append("Enter Username \n");}
        else{pd.setUsername(jTextUsername.getText());
        jTextUsername.setText("");}
        if(jPasswordField1.getText().isEmpty()){ Error.append("Enter Password \n");}
        else{pd.setPassword(jPasswordField1.getText());
        jPasswordField1.setText("");}
        
        if(update==true)
        update=false;
        if(Error.isEmpty())
        system.getPdDirectory().getPdList().add(pd);
        else
        JOptionPane.showMessageDialog(this, Error); 
        }
         */
        populateTable();

    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jTextNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextNameActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (!update) {
            userProcessContainer.remove(this);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.previous(userProcessContainer);
        } else {
            JOptionPane.showMessageDialog(this, "Please Save your updated Role");
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int index = jTableTicketingManagers.getSelectedRow();
        if (index < 0) {
            JOptionPane.showMessageDialog(this, "Please select an Manager");
            return;
        } else {
            DefaultTableModel model = (DefaultTableModel) jTableTicketingManagers.getModel();
            UserAccount selectedUserAccount = (UserAccount) model.getValueAt(index, 0);
            UserAccount deleteUserAccount = system.getUserAccountDirectory().fetchUserAccountUsingUserName(selectedUserAccount.getUsername());
            system.getUserAccountDirectory().getUserAccountList().remove(deleteUserAccount);

            PickandDropManager pd = system.getPdDirectory().findPickandDrop(deleteUserAccount.getUsername());
            if (pd != null) {
                system.getPdDirectory().getPdList().remove(pd);
            }

            ParkingManager parking = system.getParkingDirectory().findParking(deleteUserAccount.getUsername());
            if (parking != null) {
                system.getParkingDirectory().getParkingList().remove(parking);
            }
        }
        /*
        ParkingManager parking = system.getParkingDirectory().findParking(deleteUserAccount.getUsername());
        if (parking != null) {
        system.getParkingDirectory().getParkingList().remove(parking);
        }
        }
         */
        populateTable();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int index = jTableTicketingManagers.getSelectedRow();
        if (index < 0) {
            JOptionPane.showMessageDialog(this, "Please select an Manager");
            return;
        } else {
            DefaultTableModel model = (DefaultTableModel) jTableTicketingManagers.getModel();
            UserAccount selectedUserAccount = (UserAccount) model.getValueAt(index, 0);
            UserAccount deleteUserAccount = system.getUserAccountDirectory().fetchUserAccountUsingUserName(selectedUserAccount.getUsername());
            system.getUserAccountDirectory().getUserAccountList().remove(deleteUserAccount);

            PickandDropManager pd = system.getPdDirectory().findPickandDrop(deleteUserAccount.getUsername());
            if (pd != null) {
                system.getPdDirectory().getPdList().remove(pd);
            }

            ParkingManager parking = system.getParkingDirectory().findParking(deleteUserAccount.getUsername());
            if (parking != null) {
                system.getParkingDirectory().getParkingList().remove(parking);
            }
            update = true;
        }
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableTicketingManagers;
    private javax.swing.JTextField jTextName;
    private javax.swing.JTextField jTextUsername;
    // End of variables declaration//GEN-END:variables
}
