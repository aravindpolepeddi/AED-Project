/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.Enterprises;

import business.Business;
import business.Enterprise;
import business.Enterprises.EnterpriseDirectory;
import business.hrservices.CleaningServices;
import business.hrservices.CleaningServicesDirectory;
import business.hrservices.EmergencyServices;
import business.hrservices.EmergencyServicesDirectory;
import business.hrservices.TechnicalServices;
import business.hrservices.TechnicalServicesDirectory;
import business.hrservices.SecurityServices;
import business.hrservices.SecurityServicesDirectory;
import business.role.CleaningServicesRole;
import business.role.EmergencyServicesRole;
import business.role.Role;
import business.role.SecurityServicesRole;
import business.role.TechnicalServicesRole;
import business.useraccount.UserAccount;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author deepv
 */
public class HumanResourcesEntJPanel extends javax.swing.JPanel {

    Business business;
    CleaningServicesDirectory cleaningServices;
    EmergencyServicesDirectory emergencyServices;
    TechnicalServicesDirectory technicalServices;
    SecurityServicesDirectory securityServices;
    Map<String, Enterprise> network;
    EnterpriseDirectory enterpriseDirectory;

    /**
     * Creates new form HumanResourcesEntJPanel
     */
    public HumanResourcesEntJPanel(JPanel userProcessContainer, UserAccount account, Business business) {
        initComponents();

        this.business = business;
        if (business.getCleaningServices() == null) {
            this.cleaningServices = new CleaningServicesDirectory();
        } else {
            this.cleaningServices = business.getCleaningServices();
        }

        if (business.getNetworkList() == null) {
            this.network = new HashMap<String, Enterprise>();
        } else {
            this.network = business.getNetworkList();
        }

        if (business.getEmergencyServices() == null) {
            this.emergencyServices = new EmergencyServicesDirectory();
        } else {
            this.emergencyServices = business.getEmergencyServices();
        }

        if (business.getTechnicalServices() == null) {
            this.technicalServices = new TechnicalServicesDirectory();
        } else {
            this.technicalServices = business.getTechnicalServices();
        }

        if (business.getSecurityServices() == null) {
            this.securityServices = new SecurityServicesDirectory();
        } else {
            this.securityServices = business.getSecurityServices();
        }

        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        NavigationJPanel = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        workAreaPanel = new javax.swing.JPanel();
        lblRestaurantName1 = new javax.swing.JLabel();
        lblAddUser2 = new javax.swing.JLabel();
        lblManagerName2 = new javax.swing.JLabel();
        txtManagerName = new javax.swing.JTextField();
        lblRestaurantName4 = new javax.swing.JLabel();
        lblUserName2 = new javax.swing.JLabel();
        txtManagerUsername = new javax.swing.JTextField();
        lblPassword2 = new javax.swing.JLabel();
        pwdManagerPassword = new javax.swing.JPasswordField();
        btnCreateUser1 = new javax.swing.JButton();
        btnDelete1 = new javax.swing.JButton();
        btnUpdate1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblHumanResourceManagers = new javax.swing.JTable();
        cmbServices = new javax.swing.JComboBox<>();
        lblManagerName3 = new javax.swing.JLabel();
        txtNetwork = new javax.swing.JTextField();

        NavigationJPanel.setBackground(new java.awt.Color(0, 51, 51));

        javax.swing.GroupLayout NavigationJPanelLayout = new javax.swing.GroupLayout(NavigationJPanel);
        NavigationJPanel.setLayout(NavigationJPanelLayout);
        NavigationJPanelLayout.setHorizontalGroup(
            NavigationJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 175, Short.MAX_VALUE)
        );
        NavigationJPanelLayout.setVerticalGroup(
            NavigationJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 670, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(NavigationJPanel);

        jLayeredPane1.setLayout(new java.awt.CardLayout());

        workAreaPanel.setBackground(new java.awt.Color(240, 255, 255));

        lblRestaurantName1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblRestaurantName1.setForeground(new java.awt.Color(0, 153, 153));
        lblRestaurantName1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRestaurantName1.setText("Human Resources");

        lblAddUser2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAddUser2.setForeground(new java.awt.Color(0, 102, 102));
        lblAddUser2.setText("ADD NEW USER");

        lblManagerName2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblManagerName2.setText("Manager Name :");

        lblRestaurantName4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblRestaurantName4.setText("Service Name:");

        lblUserName2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblUserName2.setText("Username : ");

        lblPassword2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblPassword2.setText("Password : ");

        btnCreateUser1.setBackground(new java.awt.Color(175, 211, 211));
        btnCreateUser1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCreateUser1.setForeground(new java.awt.Color(0, 102, 102));
        btnCreateUser1.setText("CREATE");
        btnCreateUser1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCreateUser1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCreateUser1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCreateUser1MouseExited(evt);
            }
        });
        btnCreateUser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateUser1ActionPerformed(evt);
            }
        });

        btnDelete1.setBackground(new java.awt.Color(255, 255, 255));
        btnDelete1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDelete1.setForeground(new java.awt.Color(153, 0, 0));
        btnDelete1.setText("DELETE USER");
        btnDelete1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnDelete1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnDelete1MouseExited(evt);
            }
        });
        btnDelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelete1ActionPerformed(evt);
            }
        });

        btnUpdate1.setBackground(new java.awt.Color(255, 255, 255));
        btnUpdate1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnUpdate1.setForeground(new java.awt.Color(0, 102, 0));
        btnUpdate1.setText("UPDATE USER");
        btnUpdate1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdate1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnUpdate1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnUpdate1MouseExited(evt);
            }
        });
        btnUpdate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdate1ActionPerformed(evt);
            }
        });

        tblHumanResourceManagers.setBackground(new java.awt.Color(255, 255, 255));
        tblHumanResourceManagers.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tblHumanResourceManagers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "USER NAME", "PASSWORD", "MANAGER NAME", "SERVICE TYPE"
            }
        ));
        tblHumanResourceManagers.setSelectionBackground(new java.awt.Color(153, 209, 232));
        tblHumanResourceManagers.setSelectionForeground(new java.awt.Color(0, 51, 51));
        jScrollPane3.setViewportView(tblHumanResourceManagers);

        cmbServices.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT SERVICE", "CLEANING", "EMERGENCY", "TECHNICAL", "SECURITY" }));

        lblManagerName3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblManagerName3.setText("Network : ");

        javax.swing.GroupLayout workAreaPanelLayout = new javax.swing.GroupLayout(workAreaPanel);
        workAreaPanel.setLayout(workAreaPanelLayout);
        workAreaPanelLayout.setHorizontalGroup(
            workAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblRestaurantName1, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, workAreaPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(workAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(workAreaPanelLayout.createSequentialGroup()
                        .addGroup(workAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(workAreaPanelLayout.createSequentialGroup()
                                .addComponent(btnDelete1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUpdate1))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGroup(workAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(workAreaPanelLayout.createSequentialGroup()
                                .addGap(128, 128, 128)
                                .addComponent(lblAddUser2))
                            .addGroup(workAreaPanelLayout.createSequentialGroup()
                                .addGap(179, 179, 179)
                                .addComponent(lblManagerName3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, workAreaPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(workAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, workAreaPanelLayout.createSequentialGroup()
                                .addGroup(workAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblManagerName2, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblRestaurantName4, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(workAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtManagerName, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                                    .addComponent(cmbServices, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, workAreaPanelLayout.createSequentialGroup()
                                .addGroup(workAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblUserName2, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblPassword2, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(workAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtManagerUsername)
                                    .addComponent(pwdManagerPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnCreateUser1))))))
                .addGap(38, 38, 38))
        );
        workAreaPanelLayout.setVerticalGroup(
            workAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workAreaPanelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(lblRestaurantName1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addGroup(workAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(workAreaPanelLayout.createSequentialGroup()
                        .addComponent(lblAddUser2)
                        .addGap(18, 18, 18)
                        .addGroup(workAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblManagerName2)
                            .addComponent(txtManagerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(workAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblRestaurantName4)
                            .addComponent(cmbServices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(workAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblManagerName3)
                            .addComponent(txtNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(workAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtManagerUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUserName2)))
                    .addGroup(workAreaPanelLayout.createSequentialGroup()
                        .addGroup(workAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdate1)
                            .addComponent(btnDelete1))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(workAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPassword2)
                    .addComponent(pwdManagerPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCreateUser1)
                .addContainerGap(313, Short.MAX_VALUE))
        );

        jLayeredPane1.add(workAreaPanel, "card2");

        jSplitPane1.setRightComponent(jLayeredPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 912, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateUser1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCreateUser1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCreateUser1MouseEntered

    private void btnCreateUser1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCreateUser1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCreateUser1MouseExited

    private void btnCreateUser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateUser1ActionPerformed
        String userName = txtManagerUsername.getText();
        String password = pwdManagerPassword.getText();
        String serviceType = cmbServices.getSelectedItem().toString();
        String managerame = txtManagerName.getText();

        if (!business.getUserAccountDirectory().checkIfUsernameIsUnique(userName)) {
            JOptionPane.showMessageDialog(null, "UserName already taken!");
            txtManagerUsername.setText("");
            pwdManagerPassword.setText("");
        } else {

            if (serviceType.equals("CLEANING")) {
                CleaningServicesRole role = new CleaningServicesRole();
                business.getUserAccountDirectory().createUserAccount(userName, managerame, password, role, txtNetwork.getText());

                if (network.containsKey(txtNetwork.getText())) {
                    for (Map.Entry<String, Enterprise> iteration : network.entrySet()) {
                        if (iteration.getKey().equals(txtNetwork.getText())) {
                            if (iteration.getValue().getCleaningServices() == null) {
                                cleaningServices = new CleaningServicesDirectory();
                                Enterprise enterprise = iteration.getValue();
                                CleaningServices cleaningService = cleaningServices.addCleaningService();
                                cleaningService.setManagerName(managerame);
                                cleaningService.setUserName(userName);
                                cleaningService.setManagerType("CLEANING");
                                enterprise.setCleaningServices(cleaningServices);
                                network.put(txtNetwork.getText(), enterprise);
                                business.setNetworkList(network);
                            } else {
                                cleaningServices = iteration.getValue().getCleaningServices();
                                CleaningServices cleaningService = cleaningServices.addCleaningService();
                                cleaningService.setManagerName(managerame);
                                cleaningService.setUserName(userName);
                                cleaningService.setManagerType("CLEANING");
                            }
                        }
                    }
                } else {
                    Enterprise enterprise = new Enterprise();
                    CleaningServicesDirectory cleaningServicesDirectory = new CleaningServicesDirectory();
                    CleaningServices cleaningService = cleaningServicesDirectory.addCleaningService();
                    cleaningService.setManagerName(managerame);
                    cleaningService.setUserName(userName);
                    cleaningService.setManagerType("CLEANING");
                    enterprise.setCleaningServices(cleaningServices);
                    network.put(txtNetwork.getText(), enterprise);
                    business.setNetworkList(network);
                }
            } else if (serviceType.equals("EMERGENCY")) {
                EmergencyServicesRole role = new EmergencyServicesRole();
                business.getUserAccountDirectory().createUserAccount(userName, managerame, password, role, txtNetwork.getText());

                if (network.containsKey(txtNetwork.getText())) {
                    for (Map.Entry<String, Enterprise> iteration : network.entrySet()) {
                        if (iteration.getKey().equals(txtNetwork.getText())) {
                            if (iteration.getValue().getCleaningServices() == null) {
                                emergencyServices = new EmergencyServicesDirectory();
                                Enterprise enterprise = iteration.getValue();
                                EmergencyServices emergencyService = emergencyServices.addEmergencyService();
                                emergencyService.setManagerName(managerame);
                                emergencyService.setUserName(userName);
                                emergencyService.setManagerType("EMERGENCY");
                                enterprise.setEmergencyServices(emergencyServices);
                                network.put(txtNetwork.getText(), enterprise);
                                business.setNetworkList(network);
                            } else {
                                emergencyServices = iteration.getValue().getEmergencyServices();
                                EmergencyServices emergencyService = emergencyServices.addEmergencyService();
                                emergencyService.setManagerName(managerame);
                                emergencyService.setUserName(userName);
                                emergencyService.setManagerType("EMERGENCY");
                            }
                        }
                    }
                } else {
                    Enterprise enterprise = new Enterprise();
                    EmergencyServicesDirectory emergencyServicesDirectory = new EmergencyServicesDirectory();
                    EmergencyServices emergencyService = emergencyServicesDirectory.addEmergencyService();
                    emergencyService.setManagerName(managerame);
                    emergencyService.setUserName(userName);
                    emergencyService.setManagerType("EMERGENCY");
                    enterprise.setEmergencyServices(emergencyServices);
                    network.put(txtNetwork.getText(), enterprise);
                    business.setNetworkList(network);
                }
            } else if (serviceType.equals("TECHNICAL")) {
                TechnicalServicesRole role = new TechnicalServicesRole();
                business.getUserAccountDirectory().createUserAccount(userName, managerame, password, role, txtNetwork.getText());

                if (network.containsKey(txtNetwork.getText())) {
                    for (Map.Entry<String, Enterprise> iteration : network.entrySet()) {
                        if (iteration.getKey().equals(txtNetwork.getText())) {
                            if (iteration.getValue().getTechnicalServices() == null) {
                                technicalServices = new TechnicalServicesDirectory();
                                Enterprise enterprise = iteration.getValue();
                                TechnicalServices technicalService = technicalServices.addGroundService();
                                technicalService.setManagerName(managerame);
                                technicalService.setUserName(userName);
                                technicalService.setManagerType("TECHNICAL");
                                enterprise.setTechnicalServices(technicalServices);
                                network.put(txtNetwork.getText(), enterprise);
                                business.setNetworkList(network);
                            } else {
                                technicalServices = iteration.getValue().getTechnicalServices();
                                TechnicalServices technicalService = technicalServices.addGroundService();
                                technicalService.setManagerName(managerame);
                                technicalService.setUserName(userName);
                                technicalService.setManagerType("TECHNICAL");
                            }
                        }
                    }
                } else {
                    Enterprise enterprise = new Enterprise();
                    TechnicalServicesDirectory technicalServicesDirectory = new TechnicalServicesDirectory();
                    TechnicalServices technicalService = technicalServicesDirectory.addGroundService();
                    technicalService.setManagerName(managerame);
                    technicalService.setUserName(userName);
                    technicalService.setManagerType("TECHNICAL");
                    enterprise.setTechnicalServices(technicalServices);
                    network.put(txtNetwork.getText(), enterprise);
                    business.setNetworkList(network);
                }
            } else if (serviceType.equals("SECURITY")) {
                SecurityServicesRole role = new SecurityServicesRole();
                business.getUserAccountDirectory().createUserAccount(userName, managerame, password, role, txtNetwork.getText());

                if (network.containsKey(txtNetwork.getText())) {
                    for (Map.Entry<String, Enterprise> iteration : network.entrySet()) {
                        if (iteration.getKey().equals(txtNetwork.getText())) {
                            if (iteration.getValue().getSecurityServices() == null) {
                                securityServices = new SecurityServicesDirectory();
                                Enterprise enterprise = iteration.getValue();
                                SecurityServices securityService = securityServices.addSecurityService();
                                securityService.setManagerName(managerame);
                                securityService.setUserName(userName);
                                securityService.setManagerType("SECURITY");
                                enterprise.setSecurityServices(securityServices);
                                network.put(txtNetwork.getText(), enterprise);
                                business.setNetworkList(network);
                            } else {
                                securityServices = iteration.getValue().getSecurityServices();
                                SecurityServices securityService = securityServices.addSecurityService();
                                securityService.setManagerName(managerame);
                                securityService.setUserName(userName);
                                securityService.setManagerType("SECURITY");
                            }
                        }
                    }
                } else {
                    Enterprise enterprise = new Enterprise();
                    SecurityServicesDirectory securityServicesDirectory = new SecurityServicesDirectory();
                    SecurityServices securityService = securityServicesDirectory.addSecurityService();
                    securityService.setManagerName(managerame);
                    securityService.setUserName(userName);
                    securityService.setManagerType("SECURITY");
                    enterprise.setEmergencyServices(emergencyServices);
                    network.put(txtNetwork.getText(), enterprise);
                    business.setNetworkList(network);
                }
            }

            txtManagerName.setText("");
            cmbServices.setSelectedItem("SELECT SERVICE");
            txtManagerUsername.setText("");
            pwdManagerPassword.setText("");

            populateTable();
        }
    }//GEN-LAST:event_btnCreateUser1ActionPerformed

    private void btnDelete1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDelete1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDelete1MouseEntered

    private void btnDelete1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDelete1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDelete1MouseExited

    private void btnDelete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelete1ActionPerformed
        int selectedRowIndex = tblHumanResourceManagers.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a User");
            return;
        } else {
            DefaultTableModel model = (DefaultTableModel) tblHumanResourceManagers.getModel();
            UserAccount selectedUserAccount = (UserAccount) model.getValueAt(selectedRowIndex, 0);
            UserAccount accountToBeRemoved = business.getUserAccountDirectory().fetchUserAccountUsingUserName(selectedUserAccount.getUsername());
            business.getUserAccountDirectory().removeAccount(accountToBeRemoved);
            JOptionPane.showMessageDialog(null, "User Account deleted successfully.");
            populateTable();

            CleaningServices removedCleaningService = cleaningServices.findCleaningServiceByManagerName(selectedUserAccount.getName());
            if (removedCleaningService != null) {
                cleaningServices.removeCleaningService(removedCleaningService);
            }

            EmergencyServices removedEmergencyServices = emergencyServices.findEmergencyServiceByManagerName(selectedUserAccount.getName());
            if (removedEmergencyServices != null) {
                emergencyServices.removeEmergencyService(removedEmergencyServices);
            }

            TechnicalServices removedGroundServices = technicalServices.findTechServiceByManagerName(selectedUserAccount.getName());
            if (removedGroundServices != null) {
                technicalServices.removeGroundService(removedGroundServices);
            }

            SecurityServices removedSecurityServices = securityServices.findSecurityServiceByManagerName(selectedUserAccount.getName());
            if (removedSecurityServices != null) {
                securityServices.removeSecurityService(removedSecurityServices);
            }
        }
    }//GEN-LAST:event_btnDelete1ActionPerformed

    private void btnUpdate1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdate1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_btnUpdate1MouseEntered

    private void btnUpdate1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdate1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnUpdate1MouseExited

    private void btnUpdate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdate1ActionPerformed
        int selectedRowIndex = tblHumanResourceManagers.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a User");
            return;
        } else {
            DefaultTableModel model = (DefaultTableModel) tblHumanResourceManagers.getModel();
            UserAccount selectedUserAccount = (UserAccount) model.getValueAt(selectedRowIndex, 0);
        }
    }//GEN-LAST:event_btnUpdate1ActionPerformed

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblHumanResourceManagers.getModel();
        model.setRowCount(0);

        for (UserAccount userAccount : business.getUserAccountDirectory().getUserAccountList()) {
            Object[] row = new Object[4];
            CleaningServices cleaningService = null;
            EmergencyServices emergencyService = null;
            TechnicalServices groundService = null;
            SecurityServices securityService = null;
            if (cleaningServices != null && cleaningServices.getCleaningServices() != null && !cleaningServices.getCleaningServices().isEmpty()) {
                cleaningService = cleaningServices.getCleaningServices().stream().filter(x -> x.getManagerName().equals(userAccount.getName())).findAny().orElse(null);
            }
            if (emergencyServices != null && emergencyServices.getEmergencyServices() != null && !emergencyServices.getEmergencyServices().isEmpty()) {
                emergencyService = emergencyServices.getEmergencyServices().stream().filter(x -> x.getManagerName().equals(userAccount.getName())).findAny().orElse(null);
            }

            if (technicalServices != null && technicalServices.getGroundServices() != null && !technicalServices.getGroundServices().isEmpty()) {
                groundService = technicalServices.getGroundServices().stream().filter(x -> x.getManagerName().equals(userAccount.getName())).findAny().orElse(null);
            }

            if (securityServices != null && securityServices.getSecurityServices() != null && !securityServices.getSecurityServices().isEmpty()) {
                securityService = securityServices.getSecurityServices().stream().filter(x -> x.getManagerName().equals(userAccount.getName())).findAny().orElse(null);
            }
            if (userAccount.getRole() != null && userAccount.getRole().type != null && (userAccount.getRole().type == Role.RoleType.HumanResourceEntAdmin || userAccount.getRole().type == Role.RoleType.CleaningServicesRole)) {

                row[0] = userAccount;
                row[1] = userAccount.getPassword();
                row[2] = userAccount.getName();

                if (cleaningService != null) {
                    row[3] = cleaningService.getManagerType();
                } else if (emergencyService != null) {
                    row[3] = emergencyService.getManagerType();
                } else if (groundService != null) {
                    row[3] = groundService.getManagerType();
                } else if (securityService != null) {
                    row[3] = securityService.getManagerType();
                }
                model.addRow(row);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel NavigationJPanel;
    private javax.swing.JButton btnCreateUser1;
    private javax.swing.JButton btnDelete1;
    private javax.swing.JButton btnUpdate1;
    private javax.swing.JComboBox<String> cmbServices;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lblAddUser2;
    private javax.swing.JLabel lblManagerName2;
    private javax.swing.JLabel lblManagerName3;
    private javax.swing.JLabel lblPassword2;
    private javax.swing.JLabel lblRestaurantName1;
    private javax.swing.JLabel lblRestaurantName4;
    private javax.swing.JLabel lblUserName2;
    private javax.swing.JPasswordField pwdManagerPassword;
    private javax.swing.JTable tblHumanResourceManagers;
    private javax.swing.JTextField txtManagerName;
    private javax.swing.JTextField txtManagerUsername;
    private javax.swing.JTextField txtNetwork;
    private javax.swing.JPanel workAreaPanel;
    // End of variables declaration//GEN-END:variables
}
